# -*- coding: utf-8 -*-
"""ИСИТ ПР1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KpVAK50LuLeE-_3jJswrSmG8Z13pCky-

#1.1 DATA
"""

import time

times = [0,0,0,0,0,0,0,0,0,0,0,0]

import pandas as pd

tr = pd.read_csv('data.csv',sep = ';')

tr

items = tr.iloc[:,1:]
items

items = items.values.tolist()

transactions = [[i for i in row if pd.notna(i)] for row in items][:-1]

transactions

"""#1.2 APRIORI"""

#pip install apriori.python

from apriori_python import apriori

N = len(transactions)

def freq(item):
    return sum(1 for t in transactions if item.issubset(t))

"""minСonf = 0,6"""

start = time.perf_counter()

freqItemSet, rules = apriori(transactions, minSup=0.2, minConf=0.5999)

end = time.perf_counter()
times[0] = end-start

print(len(rules), rules)

rules

data = []

for left, right, confidence in rules:
    left, right = left, right
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    leverage = support - (freq_l / N) * (freq_r / N)
    lift = confidence / (freq_r / N) if freq_r > 0 else 0

    data.append({
        "antecedents": left,
        "consequents": right,
        "support": support,
        "confidence": confidence,
        "leverage": leverage,
        "lift": lift
    })

    print(f"{left} -> {right}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

#pip install pyarmviz

from PyARMViz import PyARMViz
from PyARMViz.Rule import Rule

class RuleObj:
    def __init__(self, lhs, rhs, support, confidence, lift):
        lhs = frozenset(map(str, lhs))
        rhs = frozenset(map(str, rhs))
        self.lhs = lhs
        self.rhs = rhs
        self.support = float(support)
        self.confidence = float(confidence)
        self.lift = float(lift)
    def __repr__(self):
        return (f"RuleObj(lhs={set(self.lhs)}, rhs={set(self.rhs)}, "
                f"support={self.support:.3f}, confidence={self.confidence:.3f}, lift={self.lift:.3f})")

rules_objs = [
    RuleObj(r["antecedents"], r["consequents"], r["support"], r["confidence"], r["lift"])
    for r in data
]

PyARMViz.adjacency_graph_plotly(rules_objs)

"""minConf = 0,8"""

start = time.perf_counter()

freqItemSet, rules = apriori(transactions, minSup=0.2, minConf=0.7999)

end = time.perf_counter()
times[1] = end-start
print(len(rules), rules)

rules

data = []

for left, right, confidence in rules:
    left, right = left, right
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    leverage = support - (freq_l / N) * (freq_r / N)
    lift = confidence / (freq_r / N) if freq_r > 0 else 0

    data.append({
        "antecedents": left,
        "consequents": right,
        "support": support,
        "confidence": confidence,
        "leverage": leverage,
        "lift": lift
    })

    print(f"{left} -> {right}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

class RuleObj:
    def __init__(self, lhs, rhs, support, confidence, lift):
        lhs = frozenset(map(str, lhs))
        rhs = frozenset(map(str, rhs))
        self.lhs = lhs
        self.rhs = rhs
        self.support = float(support)
        self.confidence = float(confidence)
        self.lift = float(lift)

rules_objs = [
    RuleObj(r["antecedents"], r["consequents"], r["support"], r["confidence"], r["lift"])
    for r in data
]


PyARMViz.adjacency_graph_plotly(rules_objs)

"""#1.3 EFFICIENT APRIORI"""

#pip install efficient-apriori

from efficient_apriori import apriori

N = len(transactions)

def freq(item):
    return sum(1 for t in transactions if item.issubset(t))

"""min_confidence = 0,6"""

start = time.perf_counter()

freqItemSet, rules = apriori(transactions, min_support=0.2, min_confidence=0.5999)

end = time.perf_counter()
times[2] = end-start

print(len(rules), rules)

rules

for r in rules:
    left, right = frozenset(r.lhs), frozenset(r.rhs)
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    confidence = r.confidence
    leverage = support - (freq_l / N) * (freq_r / N)

    print(f"{set(left)} -> {set(right)}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

PyARMViz.adjacency_graph_plotly(rules)

"""min_confidence = 0,8"""

start = time.perf_counter()

freqItemSet, rules = apriori(transactions, min_support=0.2, min_confidence=0.7999)

end = time.perf_counter()
times[3] = end-start
print(len(rules), rules)

rules

for r in rules:
    left, right = frozenset(r.lhs), frozenset(r.rhs)
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    confidence = r.confidence
    leverage = support - (freq_l / N) * (freq_r / N)

    print(f"{set(left)} -> {set(right)}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

PyARMViz.adjacency_graph_plotly(rules)

"""#1.4 FPGrowth"""

#pip install fpgrowth_py

from fpgrowth_py import fpgrowth

N = len(transactions)

def freq(item):
    return sum(1 for t in transactions if item.issubset(t))

"""minConf = 0,6"""

start = time.perf_counter()

freqItemSet, rules = fpgrowth(transactions, minSupRatio=0.2, minConf=0.5999)

end = time.perf_counter()
times[4] = end-start
print(len(rules), rules)

rules

data = []

for left, right, confidence in rules:
    left, right = left, right
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    leverage = support - (freq_l / N) * (freq_r / N)
    lift = confidence / (freq_r / N) if freq_r > 0 else 0

    data.append({
        "antecedents": left,
        "consequents": right,
        "support": support,
        "confidence": confidence,
        "leverage": leverage,
        "lift": lift
    })

    print(f"{left} -> {right}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

#pip install pyarmviz

from PyARMViz import PyARMViz

class RuleObj:
    def __init__(self, lhs, rhs, support, confidence, lift):
        lhs = frozenset(map(str, lhs))
        rhs = frozenset(map(str, rhs))
        self.lhs = lhs
        self.rhs = rhs
        self.support = float(support)
        self.confidence = float(confidence)
        self.lift = float(lift)

rules_objs = [
    RuleObj(r["antecedents"], r["consequents"], r["support"], r["confidence"], r["lift"])
    for r in data
]
PyARMViz.adjacency_graph_plotly(rules_objs)

"""minConf = 0,8"""

start = time.perf_counter()

freqItemSet, rules = fpgrowth(transactions, minSupRatio=0.2, minConf=0.7999)

end = time.perf_counter()
times[5] = end-start
print(len(rules), rules)

rules

data = []

for left, right, confidence in rules:
    left, right = left, right
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    leverage = support - (freq_l / N) * (freq_r / N)
    lift = confidence / (freq_r / N) if freq_r > 0 else 0

    data.append({
        "antecedents": left,
        "consequents": right,
        "support": support,
        "confidence": confidence,
        "leverage": leverage,
        "lift": lift
    })

    print(f"{left} -> {right}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

class RuleObj:
    def __init__(self, lhs, rhs, support, confidence, lift):
        lhs = frozenset(map(str, lhs))
        rhs = frozenset(map(str, rhs))
        self.lhs = lhs
        self.rhs = rhs
        self.support = float(support)
        self.confidence = float(confidence)
        self.lift = float(lift)

rules_objs = [
    RuleObj(r["antecedents"], r["consequents"], r["support"], r["confidence"], r["lift"])
    for r in data
]
PyARMViz.adjacency_graph_plotly(rules_objs)

"""#2.1 DATA"""

#pip install ucimlrepo

from ucimlrepo import fetch_ucirepo
import pandas as pd

# fetch dataset
online_retail = fetch_ucirepo(id=352)

# data (as pandas dataframes)
X = online_retail.data.features
y = online_retail.data.targets

# metadata
print(online_retail.metadata)

# variable information
print(online_retail.variables)

online_retail.data

df = online_retail.data.original.copy()
df

import pandas as pd

df = df.dropna(subset=["InvoiceNo", "Description", "CustomerID"])
df = df[df["Quantity"] > 0]
df["InvoiceNo"] = df["InvoiceNo"].astype(str)

df["Description"] = df["Description"].str.strip().str.lower()

transactions = (
    df.groupby("InvoiceNo")["Description"]
      .apply(lambda s: sorted(set(s)))
      .tolist()
)

transactions

"""#2.2 APRIORI"""

#pip install apriori.python

from apriori_python import apriori

N = len(transactions)

def freq(item):
    return sum(1 for t in transactions if item.issubset(t))

"""minConf = 0,6"""

start = time.perf_counter()

freqItemSet, rules = apriori(transactions, minSup=0.01, minConf=0.5999)

end = time.perf_counter()
times[6] = end-start
print(len(rules), rules)

rules

data = []

for left, right, confidence in rules:
    left, right = left, right
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    leverage = support - (freq_l / N) * (freq_r / N)
    lift = confidence / (freq_r / N) if freq_r > 0 else 0

    data.append({
        "antecedents": left,
        "consequents": right,
        "support": support,
        "confidence": confidence,
        "leverage": leverage,
        "lift": lift
    })

    print(f"{left} -> {right}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

class RuleObj:
    def __init__(self, lhs, rhs, support, confidence, lift):
        lhs = frozenset(map(str, lhs))
        rhs = frozenset(map(str, rhs))
        self.lhs = lhs
        self.rhs = rhs
        self.support = float(support)
        self.confidence = float(confidence)
        self.lift = float(lift)

rules_objs = [
    RuleObj(r["antecedents"], r["consequents"], r["support"], r["confidence"], r["lift"])
    for r in data
]
PyARMViz.adjacency_graph_plotly(rules_objs)

"""minConf = 0,8"""

start = time.perf_counter()

freqItemSet, rules = apriori(transactions, minSup=0.2, minConf=0.7999)

end = time.perf_counter()
times[7] = end-start
print(len(rules), rules)

rules

data = []

for left, right, confidence in rules:
    left, right = left, right
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    leverage = support - (freq_l / N) * (freq_r / N)
    lift = confidence / (freq_r / N) if freq_r > 0 else 0

    data.append({
        "antecedents": left,
        "consequents": right,
        "support": support,
        "confidence": confidence,
        "leverage": leverage,
        "lift": lift
    })

    print(f"{left} -> {right}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

class RuleObj:
    def __init__(self, lhs, rhs, support, confidence, lift):
        lhs = frozenset(map(str, lhs))
        rhs = frozenset(map(str, rhs))
        self.lhs = lhs
        self.rhs = rhs
        self.support = float(support)
        self.confidence = float(confidence)
        self.lift = float(lift)

rules_objs = [
    RuleObj(r["antecedents"], r["consequents"], r["support"], r["confidence"], r["lift"])
    for r in data
]
PyARMViz.adjacency_graph_plotly(rules_objs)

"""#2.3 EFFICIENT APRIORI"""

#pip install efficient-apriori

from efficient_apriori import apriori

N = len(transactions)

def freq(item):
    return sum(1 for t in transactions if item.issubset(t))

"""min_confidence = 0,6"""

start = time.perf_counter()

freqItemSet, rules = apriori(transactions, min_support=0.01, min_confidence=0.5999)

end = time.perf_counter()
times[8] = end-start
print(len(rules), rules)

rules

for r in rules:
    left, right = frozenset(r.lhs), frozenset(r.rhs)
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    confidence = r.confidence
    leverage = support - (freq_l / N) * (freq_r / N)

    print(f"{set(left)} -> {set(right)}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

PyARMViz.adjacency_graph_plotly(rules)

"""min_confidence = 0,8"""

start = time.perf_counter()

freqItemSet, rules = apriori(transactions, min_support=0.01, min_confidence=0.7999)

end = time.perf_counter()
times[9] = end-start
print(len(rules), rules)

rules

for r in rules:
    left, right = frozenset(r.lhs), frozenset(r.rhs)
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    confidence = r.confidence
    leverage = support - (freq_l / N) * (freq_r / N)

    print(f"{set(left)} -> {set(right)}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

PyARMViz.adjacency_graph_plotly(rules)

"""#2.4 FPGrowth"""

#pip install fpgrowth_py

from fpgrowth_py import fpgrowth

N = len(transactions)

def freq(item):
    return sum(1 for t in transactions if item.issubset(t))

"""minConf = 0,6"""

start = time.perf_counter()

freqItemSet, rules = fpgrowth(transactions, minSupRatio=0.01, minConf=0.5999)

end = time.perf_counter()
times[10] = end-start
print(len(rules), rules)

rules

data = []

for left, right, confidence in rules:
    left, right = left, right
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    leverage = support - (freq_l / N) * (freq_r / N)
    lift = confidence / (freq_r / N) if freq_r > 0 else 0

    data.append({
        "antecedents": left,
        "consequents": right,
        "support": support,
        "confidence": confidence,
        "leverage": leverage,
        "lift": lift
    })

    print(f"{left} -> {right}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

class RuleObj:
    def __init__(self, lhs, rhs, support, confidence, lift):
        lhs = frozenset(map(str, lhs))
        rhs = frozenset(map(str, rhs))
        self.lhs = lhs
        self.rhs = rhs
        self.support = float(support)
        self.confidence = float(confidence)
        self.lift = float(lift)

rules_objs = [
    RuleObj(r["antecedents"], r["consequents"], r["support"], r["confidence"], r["lift"])
    for r in data
]
PyARMViz.adjacency_graph_plotly(rules_objs)

"""minConf = 0,8"""

start = time.perf_counter()

freqItemSet, rules = fpgrowth(transactions, minSupRatio=0.01, minConf=0.7999)

end = time.perf_counter()
times[11] = end-start
print(len(rules), rules)

rules

data = []

for left, right, confidence in rules:
    left, right = left, right
    union = left | right

    freq_union = freq(union)
    freq_l = freq(left)
    freq_r = freq(right)

    support = freq_union / N
    leverage = support - (freq_l / N) * (freq_r / N)
    lift = confidence / (freq_r / N) if freq_r > 0 else 0

    data.append({
        "antecedents": left,
        "consequents": right,
        "support": support,
        "confidence": confidence,
        "leverage": leverage,
        "lift": lift
    })

    print(f"{left} -> {right}: support={support:.2f}, confidence={confidence:.2f}, leverage={leverage:.2f}")

from PyARMViz import PyARMViz

class RuleObj:
    def __init__(self, lhs, rhs, support, confidence, lift):
        lhs = frozenset(map(str, lhs))
        rhs = frozenset(map(str, rhs))
        self.lhs = lhs
        self.rhs = rhs
        self.support = float(support)
        self.confidence = float(confidence)
        self.lift = float(lift)

rules_objs = [
    RuleObj(r["antecedents"], r["consequents"], r["support"], r["confidence"], r["lift"])
    for r in data
]
PyARMViz.adjacency_graph_plotly(rules_objs)

"""#3 Визуализация"""

times

import numpy as np
import matplotlib.pyplot as plt

labels = ["Apriori", "Efficient Apriori", "FP-Growth"]

times_06 = [times[0], times[2], times[4]]
times_08 = [times[1], times[3], times[5]]

x = np.arange(len(labels))
width = 0.35

fig, ax = plt.subplots(figsize=(8,5))

rects1 = ax.bar(x - width/2, times_06, width, label="min_conf=0.6", color="b")
rects2 = ax.bar(x + width/2, times_08, width, label="min_conf=0.8", color="r")

ax.set_ylabel("Время (сек)")
ax.set_title("Сравнение времени работы алгоритмов")
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

plt.tight_layout()
plt.show()

labels = ["Apriori", "Efficient Apriori", "FP-Growth"]

times_06 = [times[6], times[8], times[10]]
times_08 = [times[7], times[9], times[11]]

x = np.arange(len(labels))
width = 0.35

fig, ax = plt.subplots(figsize=(8,5))

rects1 = ax.bar(x - width/2, times_06, width, label="min_conf=0.6", color="b")
rects2 = ax.bar(x + width/2, times_08, width, label="min_conf=0.8", color="r")

ax.set_ylabel("Время (сек)")
ax.set_title("Сравнение времени работы алгоритмов")
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

plt.tight_layout()
plt.show()